EXERCISE 1:
-------------------------------------------

library(LaplacesDemon)

no_of_generator <- c(1,1,1,9,6,6,1,3,2,8,11,8,18,6,4)
megawatts_per_gen <- c(13.60, 12.00, 5.60, 0.76, 0.65, 1.12, 5.53, 5.53, 7.35, 0.78, 1.09, 0.78, 1.45, 7.74, 0.95)
prob_nop <- c(0.16, 0.16, 0.14, 0.02, 0.01, 0.02, 0.17, 0.17, 0.12, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01)
daily_demand <- c(6.04, 7.15, 9.04, 10.12, 5.80, 5.40, 6.20, 6.06, 7.97, 6.52, 9.05, 5.37, 3.99, 6.69, 5.85, 5.88, 4.86, 5.58, 7.00, 8.30)
#capacity_of_station= no_of_generator*megawatts_per_gen
randomday <- c()
pow <- c()
for (i in 1:15)
{
	p=1-prob_nop[i]
	pow <- rbern(no_of_generator[i],p)
	totalpow = sum(pow)
	randomday <- c(randomday,totalpow*megawatts_per_gen[i])
	
	#print(pow)
	#cat("Station no",i,"no_of_generator", no_of_generator[i], "megawatts_per_gen", megawatts_per_gen[i], "total power", no_of_generator[i]*megawatts_per_gen[i]*pow,"\n")
	#cat("City", i, "demands", daily_demand[i],"Daily \n")
}

A = matrix( c(30,0,0,0,20,0,3,7,3,10,0,0,6,5,0,
20,0,10,0,0,10,6,5,3,10,0,0,6,7,0,
15,8,0,0,0,10,9,6,2,10,0,20,6,8,0,
0,0,0,80,0,0,0,8,2,10,0,0,6,6,0,
0,20,0,0,0,0,15,4,4,0,0,8,6,5,10
,21,0,0,0,0,15,0,5,4,0,0,0,6,4,10,
14,0,10,0,10,0,11,5,5,0,0,0,6,5,10,
0,41,0,0,0,0,7,5,5,0,0,15,6,5,10,
0,0,25,0,0,7,0,5,10,10,0,0,8,8,0,
0,15,5,0,15,8,10,8,4,0,0,0,6,5,15,
0,0,10,0,0,0,0,4,8,15,0,41,0,8,0,
0,7,0,0,10,0,12,10,5,0,0,0,6,0,10,
0,0,10,0,0,0,0,5,5,0,0,9,0,10,0,
0,0,0,0,0,0,0,5,5,15,14,0,6,4,0,
0,0,10,0,0,9,14,4,5,0,21,0,0,0,15,
0,9,0,20,10,6,0,4,4,0,0,0,6,2,0,
0,0,0,0,10,20,0,2,8,0,0,0,4,2,20,
0,0,10,0,10,0,0,2,6,0,15,7,6,2,0,
0,0,10,0,0,15,0,3,5,0,20,0,4,3,0,
0,0,0,0,15,0,13,3,7,20,30,0,6,0,0), nrow =15, ncol =20)

cat("power station status",pow,"\n")
#cat(randomday,"\n")

for (d in 1:20)
{
	per_city_power = sum(A[,d]*0.01*randomday)
	#cat("City",d,"per city",per_city_power,"demand is",daily_demand[d],"difference is",per_city_power-daily_demand[d],"\n")
	if(per_city_power<daily_demand[d])
	{
	    cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"City experienced BLACKOUT","\n")
	}
	else
	{
		cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"city will lighten up\n")
	}
}

--------------------------------------------------------
OUTPUT:

City 1 will get total power 10.4457 Demand of city is 6.04 city will lighten up
City 2 will get total power 10.1458 Demand of city is 7.15 city will lighten up
City 3 will get total power 11.7591 Demand of city is 9.04 city will lighten up
City 4 will get total power 11.3712 Demand of city is 10.12 city will lighten up
City 5 will get total power 8.4803 Demand of city is 5.8 city will lighten up
City 6 will get total power 8.3945 Demand of city is 5.4 city will lighten up
City 7 will get total power 8.4533 Demand of city is 6.2 city will lighten up
City 8 will get total power 11.2341 Demand of city is 6.06 city will lighten up
City 9 will get total power 9.1269 Demand of city is 7.97 city will lighten up
City 10 will get total power 9.3608 Demand of city is 6.52 city will lighten up
City 11 will get total power 8.402 Demand of city is 9.05 City experienced BLACKOUT 
City 12 will get total power 5.7791 Demand of city is 5.37 city will lighten up
City 13 will get total power 6.1886 Demand of city is 3.99 city will lighten up
City 14 will get total power 6.8386 Demand of city is 6.69 city will lighten up
City 15 will get total power 6.058 Demand of city is 5.85 city will lighten up
City 16 will get total power 6.4518 Demand of city is 5.88 city will lighten up
City 17 will get total power 5.1738 Demand of city is 4.86 city will lighten up
City 18 will get total power 6.2111 Demand of city is 5.58 city will lighten up
City 19 will get total power 6.9782 Demand of city is 7 City experienced BLACKOUT 
City 20 will get total power 8.6401 Demand of city is 8.3 city will lighten up

-------------------------------------------------------------------

EXERCISE 2 :

----------------------------------------------------------------------

exer2 <- function()
{

failure <- function()
{
	library(LaplacesDemon)
	blackout = 0
	no_of_generator <- c(1,1,1,9,6,6,1,3,2,8,11,8,18,6,4)
	megawatts_per_gen <- c(13.60, 12.00, 5.60, 0.76, 0.65, 1.12, 5.53, 5.53, 7.35, 0.78, 1.09, 0.78, 1.45, 7.74, 0.95)
	prob_nop <- c(0.16, 0.16, 0.14, 0.02, 0.01, 0.02, 0.17, 0.17, 0.12, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01)
	daily_demand <- c(6.04, 7.15, 9.04, 10.12, 5.80, 5.40, 6.20, 6.06, 7.97, 6.52, 9.05, 5.37, 3.99, 6.69, 5.85, 5.88, 4.86, 5.58, 7.00, 8.30)
	#capacity_of_station= no_of_generator*megawatts_per_gen
	randomday <- c()
	pow <- c()
	for (i in 1:15)
	{
		p=1-prob_nop[i]
		pow <- rbern(no_of_generator[i],p)
		totalpow = sum(pow)
		randomday <- c(randomday,totalpow*megawatts_per_gen[i])
		
		#print(pow)
		#cat("Station no",i,"no_of_generator", no_of_generator[i], "megawatts_per_gen", megawatts_per_gen[i], "total power", no_of_generator[i]*megawatts_per_gen[i]*pow,"\n")
		#cat("City", i, "demands", daily_demand[i],"Daily \n")
	}

	A = matrix( c(30,0,0,0,20,0,3,7,3,10,0,0,6,5,0,
	20,0,10,0,0,10,6,5,3,10,0,0,6,7,0,
	15,8,0,0,0,10,9,6,2,10,0,20,6,8,0,
	0,0,0,80,0,0,0,8,2,10,0,0,6,6,0,
	0,20,0,0,0,0,15,4,4,0,0,8,6,5,10
	,21,0,0,0,0,15,0,5,4,0,0,0,6,4,10,
	14,0,10,0,10,0,11,5,5,0,0,0,6,5,10,
	0,41,0,0,0,0,7,5,5,0,0,15,6,5,10,
	0,0,25,0,0,7,0,5,10,10,0,0,8,8,0,
	0,15,5,0,15,8,10,8,4,0,0,0,6,5,15,
	0,0,10,0,0,0,0,4,8,15,0,41,0,8,0,
	0,7,0,0,10,0,12,10,5,0,0,0,6,0,10,
	0,0,10,0,0,0,0,5,5,0,0,9,0,10,0,
	0,0,0,0,0,0,0,5,5,15,14,0,6,4,0,
	0,0,10,0,0,9,14,4,5,0,21,0,0,0,15,
	0,9,0,20,10,6,0,4,4,0,0,0,6,2,0,
	0,0,0,0,10,20,0,2,8,0,0,0,4,2,20,
	0,0,10,0,10,0,0,2,6,0,15,7,6,2,0,
	0,0,10,0,0,15,0,3,5,0,20,0,4,3,0,
	0,0,0,0,15,0,13,3,7,20,30,0,6,0,0), nrow =15, ncol =20)

	#cat("power station status",pow,"\n")
	#cat(randomday,"\n")

	for (d in 1:20)
	{
		per_city_power = sum(A[,d]*0.01*randomday)
		#cat("City",d,"per city",per_city_power,"demand is",daily_demand[d],"difference is",per_city_power-daily_demand[d],"\n")
		if(per_city_power<daily_demand[d])
		{
			#cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"City experienced BLACKOUT","\n")
			#cat("BLACKOUT",d, "\n")
			blackout = 1
		}
		else
		{
		  #cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"city will lighten up\n")
		}
	}
	if(blackout==1)
	{
		return (1)
	}
	else
	{
		return (0)
	}
	

}

count = 0
count_square = 0
for (k in 1:1000000)
{
	#cat("TRIAL",k,"\n")
	p= failure()
	#cat("p=",p)
	count = count + p
	count_square = count_square+ (p^2)
	#cat("trial",k,"p is",p,"count is",count,"\n")
}

proba <<- count/k
cat("probability is",proba,"\n")

#Mean time 
Lambda = count/k

#Variance 
Variance = (count_square -k*Lambda^2)/(k-1)

#Standard Error
se = (Variance/k)^0.5

#Interval
		dlta = qnorm((1+0.9)/2)
		llimit = Lambda - dlta*se
		rlimit = Lambda + dlta*se

}

---------------------------------------------
OUTPUT :

run exer2()

probability is 0.612089

------------------------------------------------------------

EXERCISE 3 :

------------------------------------------------------------
failure2 <- function(s,p)
{
	library(LaplacesDemon)
	blackout = 0
	no_of_generator <- c(1,1,1,9,6,6,1,3,2,8,11,8,18,6,4)
	megawatts_per_gen <- c(13.60, 12.00, 5.60, 0.76, 0.65, 1.12, 5.53, 5.53, 7.35, 0.78, 1.09, 0.78, 1.45, 7.74, 0.95)
	prob_nop <- c(0.16, 0.16, 0.14, 0.02, 0.01, 0.02, 0.17, 0.17, 0.12, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01)
	prob_nop[s]<- c(p)
	#print(prob_nop)
	daily_demand <- c(6.04, 7.15, 9.04, 10.12, 5.80, 5.40, 6.20, 6.06, 7.97, 6.52, 9.05, 5.37, 3.99, 6.69, 5.85, 5.88, 4.86, 5.58, 7.00, 8.30)
	randomday <- c()
	pow <- c()
	for (i in 1:15)
	{
		np=1-prob_nop[i]
		pow <- rbern(no_of_generator[i],np)
		totalpow = sum(pow)
		randomday <- c(randomday,totalpow*megawatts_per_gen[i])
		
		#print(pow)
		#cat("Station no",i,"no_of_generator", no_of_generator[i], "megawatts_per_gen", megawatts_per_gen[i], "total power", no_of_generator[i]*megawatts_per_gen[i]*pow,"\n")
		#cat("City", i, "demands", daily_demand[i],"Daily \n")
	}

	A = matrix( c(30,0,0,0,20,0,3,7,3,10,0,0,6,5,0,
	20,0,10,0,0,10,6,5,3,10,0,0,6,7,0,
	15,8,0,0,0,10,9,6,2,10,0,20,6,8,0,
	0,0,0,80,0,0,0,8,2,10,0,0,6,6,0,
	0,20,0,0,0,0,15,4,4,0,0,8,6,5,10
	,21,0,0,0,0,15,0,5,4,0,0,0,6,4,10,
	14,0,10,0,10,0,11,5,5,0,0,0,6,5,10,
	0,41,0,0,0,0,7,5,5,0,0,15,6,5,10,
	0,0,25,0,0,7,0,5,10,10,0,0,8,8,0,
	0,15,5,0,15,8,10,8,4,0,0,0,6,5,15,
	0,0,10,0,0,0,0,4,8,15,0,41,0,8,0,
	0,7,0,0,10,0,12,10,5,0,0,0,6,0,10,
	0,0,10,0,0,0,0,5,5,0,0,9,0,10,0,
	0,0,0,0,0,0,0,5,5,15,14,0,6,4,0,
	0,0,10,0,0,9,14,4,5,0,21,0,0,0,15,
	0,9,0,20,10,6,0,4,4,0,0,0,6,2,0,
	0,0,0,0,10,20,0,2,8,0,0,0,4,2,20,
	0,0,10,0,10,0,0,2,6,0,15,7,6,2,0,
	0,0,10,0,0,15,0,3,5,0,20,0,4,3,0,
	0,0,0,0,15,0,13,3,7,20,30,0,6,0,0), nrow =15, ncol =20)

	#cat("power station status",pow,"\n")
	#cat(randomday,"\n")

	for (d in 1:20)
	{
		per_city_power = sum(A[,d]*0.01*randomday)
		#cat("City",d,"per city",per_city_power,"demand is",daily_demand[d],"difference is",per_city_power-daily_demand[d],"\n")
		if(per_city_power<daily_demand[d])
		{
			#cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"City experienced BLACKOUT","\n")
			#cat("BLACKOUT",d, "\n")
			blackout = 1
		}
		else
		{
		  #cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"city will lighten up\n")
		}
	}
	if(blackout==1)
	{
		return (1)
	}
	else
	{
		return (0)
	}
	

}

count = 0
s<-readline(prompt="Enter Station Number ")
p<-readline(prompt="Enter Probability for this station ")
s <- as.integer(s)
p <- as.integer(p)
for (k in 1:100000)
{
	#cat("TRIAL",k,"\n")
	res= failure2(s,p)
	count = count + res
	#cat("trial",k,"p is",res,"count is",count,"\n")
}


cat("probability is",count/k,"\n")

--------------------------------------------------------------------------

OUTPUT :

---------------------------------------------------------------------------
Enter Station Number 5
Enter Probability for this station 0.5
probability is 0.628

-----------------------------------------------

EXERCISE 4 :
------------------------------------------------------
exer2() 									#It will give probability for first time without changing any probability 
check <<- (1/proba)-1 						# Calculate mean time to failure for first samples
cat("CHECK VALUE",check,"\n")
exer3() 									#It will run simulation by diving each station's probability by half.


exer3 <- function()
{
  
  failure <- function()
  {
    library(LaplacesDemon)
    blackout = 0
    #cat("################### ALERT",ALERT,"###############\n")
    no_of_generator <- c(1,1,1,9,6,6,1,3,2,8,11,8,18,6,4)
    megawatts_per_gen <- c(13.60, 12.00, 5.60, 0.76, 0.65, 1.12, 5.53, 5.53, 7.35, 0.78, 1.09, 0.78, 1.45, 7.74, 0.95)
    prob_nop <- c(0.16, 0.16, 0.14, 0.02, 0.01, 0.02, 0.17, 0.17, 0.12, 0.02, 0.02, 0.02, 0.02, 0.02, 0.01)
    daily_demand <- c(6.04, 7.15, 9.04, 10.12, 5.80, 5.40, 6.20, 6.06, 7.97, 6.52, 9.05, 5.37, 3.99, 6.69, 5.85, 5.88, 4.86, 5.58, 7.00, 
                      8.30)
    #capacity_of_station= no_of_generator*megawatts_per_gen
    randomday <- c()
    pow <- c()
    for (i in 1:15) #Run for all city
    {	
      if(i==J)
      {
        p=1-(prob_nop[i]/2) #Probability will be half one by one
        #cat("When i==",J,"Proba=",p,"\n")
      }
      else
      {
        p=1-prob_nop[i] #Other generator's probability will be same
        #cat("When iNOT",J,"Proba=",p,"\n")
      }
      
      pow <- rbern(no_of_generator[i],p)
      totalpow = sum(pow) #total number of generator at each station
      randomday <- c(randomday,totalpow*megawatts_per_gen[i])
	  #BELOW COMMENTS ARE JUST TO TEST CODE
      #print(pow)
      #cat("Station no",i,"no_of_generator", no_of_generator[i], "megawatts_per_gen", megawatts_per_gen[i], "total power",no_of_generator[i]*megawatts_per_gen[i]*pow,"\n")
      #cat("City", i, "demands", daily_demand[i],"Daily \n")
    }
    
    A = matrix( c(30,0,0,0,20,0,3,7,3,10,0,0,6,5,0,
                  20,0,10,0,0,10,6,5,3,10,0,0,6,7,0,
                  15,8,0,0,0,10,9,6,2,10,0,20,6,8,0,
                  0,0,0,80,0,0,0,8,2,10,0,0,6,6,0,
                  0,20,0,0,0,0,15,4,4,0,0,8,6,5,10
                  ,21,0,0,0,0,15,0,5,4,0,0,0,6,4,10,
                  14,0,10,0,10,0,11,5,5,0,0,0,6,5,10,
                  0,41,0,0,0,0,7,5,5,0,0,15,6,5,10,
                  0,0,25,0,0,7,0,5,10,10,0,0,8,8,0,
                  0,15,5,0,15,8,10,8,4,0,0,0,6,5,15,
                  0,0,10,0,0,0,0,4,8,15,0,41,0,8,0,
                  0,7,0,0,10,0,12,10,5,0,0,0,6,0,10,
                  0,0,10,0,0,0,0,5,5,0,0,9,0,10,0,
                  0,0,0,0,0,0,0,5,5,15,14,0,6,4,0,
                  0,0,10,0,0,9,14,4,5,0,21,0,0,0,15,
                  0,9,0,20,10,6,0,4,4,0,0,0,6,2,0,
                  0,0,0,0,10,20,0,2,8,0,0,0,4,2,20,
                  0,0,10,0,10,0,0,2,6,0,15,7,6,2,0,
                  0,0,10,0,0,15,0,3,5,0,20,0,4,3,0,
                  0,0,0,0,15,0,13,3,7,20,30,0,6,0,0), nrow =15, ncol =20)
    
    #cat("power station status",pow,"\n")
    #cat(randomday,"\n")
    
    for (d in 1:20)
    {
      per_city_power = sum(A[,d]*0.01*randomday)
      #cat("City",d,"per city",per_city_power,"demand is",daily_demand[d],"difference is",per_city_power-daily_demand[d],"\n")
      if(per_city_power<daily_demand[d])
      {
        #cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"City experienced BLACKOUT","\n")
        #cat("BLACKOUT",d, "\n")
        blackout = 1
      }
      else
      {
        #cat("City",d,"will get total power",per_city_power,"Demand of city is",daily_demand[d],"city will lighten up\n")
      }
    }
    if(blackout==1)
    {
      return (1)
    }
    else
    {
      return (0)
    }
    
    
  }
  
  mttf <- c()
  for(J in 1:10)
  {	
    count = 0
    count_square = 0
    for (k in 1:50000)
    {
      #cat("TRIAL",k,"\n")
      p= failure()
      #cat("p=",p)
      count = count + p
      count_square = count_square+ (p^2)
      #cat("trial",k,"p is",p,"count is",count,"\n")
    }
    
    #Mean time to failure 
	new_proba = (k/count)-1
	mttf <- c(mttf,new_proba - check)
	if(new_proba-check >=4)
	{
    cat("Cont. 4 days blackout....!!!! Failed Station J =",J,"Probability =",count/k,"\n")
    }
	else
	{
		#cat("MTTF      ", mttf,"\n")
		#Mean time 
		Lambda = count/k
  
   
		#Variance 
		Variance = (count_square -k*Lambda^2)/(k-1)
		  
		#Standard Error
		se = (Variance/k)^0.5
		#cat(se,"\n")
		
		#Interval
		dlta = qnorm((1+0.9)/2)
		llimit = Lambda - dlta*se
		rlimit = Lambda + dlta*se
		cat("Station#",J,"Lambda=",Lambda,"Left limit = ", llimit,"Right Limit = ",rlimit,"MTTF = ",mttf,"\n")
	}
    
    J = J+1
    
  }
  
  
}
----------------------------------------------------------------------------------------
OUTPUT

probability is 0.6032 
Station# 1 Lambda= 0.588 Left limit =  0.5517578 Right Limit =  0.6242422 MTTF =  0.1022148 
Station# 2 Lambda= 0.59 Left limit =  0.5537845 Right Limit =  0.6262155 MTTF =  0.09644978 
Station# 3 Lambda= 0.576 Left limit =  0.5396109 Right Limit =  0.6123891 MTTF =  0.1376456 
Station# 4 Lambda= 0.594 Left limit =  0.5578396 Right Limit =  0.6301604 MTTF =  0.08503621 
Station# 5 Lambda= 0.638 Left limit =  0.6026132 Right Limit =  0.6733868 MTTF =  -0.03106735 
Station# 6 Lambda= 0.658 Left limit =  0.6230696 Right Limit =  0.6929304 MTTF =  -0.07870863 
Station# 7 Lambda= 0.58 Left limit =  0.5436574 Right Limit =  0.6163426 MTTF =  0.1256725 
Station# 8 Lambda= 0.572 Left limit =  0.5355668 Right Limit =  0.6084332 MTTF =  0.1497863 
Station# 9 Lambda= 0.588 Left limit =  0.5517578 Right Limit =  0.6242422 MTTF =  0.1022148 
Station# 10 Lambda= 0.572 Left limit =  0.5355668 Right Limit =  0.6084332 MTTF =  0.1497863
-----------------------------------------------------------------------------------
